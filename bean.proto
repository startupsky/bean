//v2版本采用google protocol buffer来描述游戏通信协议
//================================================================================================================
//Query是客户端发给Server的查询请求。Answer是服务端发送给客户端回应，回应包含两种类型：
//1.事件
//2.针对客户端的请求的回答。
syntax = "proto3";

message Common {
    enum Action {
        LOGIN = 0;
        LOGOUT = 1;  
        REPORTLOCATION = 2;
        CREATGAME = 3;
        JOINGAME = 4;
        CANCELGAME = 5;  //取消一个创建的game,或者退出一个join的game.
        LISTGAME = 6;
        QUIT = 7;    //退出游戏但是保留连接
        EXIT = 8;    //退出游戏并释放连接
    }

    enum EventType {
        JOINED = 0; 
        CANCELLEDGAME = 1;
    }

    message Payload {
        bytes raw = 1; 
    }
}

message Query {
    uint64 id = 1;
    Common.Action action = 2;
    Common.Payload payload = 3;
}

message Answer {
    message Event {
        Common.EventType type = 1;
    }
    message Response {
        uint64 request_id = 1;    
        Common.Action action = 2;
    }

    oneof Reaction {
        Event event = 1;
        Response response = 2; 
    }
    Common.Payload payload = 3;
}
//================================================================================================================
//一问一答的payload格式，c/s端可根据action字段来判定payload格式
//用户登陆
//Request:
message LoginRequest {
    message CellLogin {
        uint32 cell_phone = 1;
        uint32 code = 2;
    }
    oneof way{
        CellLogin   cell = 1;
        uint64 token = 2;
    } 
    uint32 client_proto_version = 3;
}

//Answer:
message LoginAnswer {
    enum LoginErrNo{
        OK = 0;
        ERRORCODE = 1;
        INVALIDTOKEN = 2;
        PROTOVERSIONTOOLOW = 3;
    }
    LoginErrNo errno = 1;
    uint64 token = 2;  //return token if client use cellphone to login
}
//----------------------------------------------------------------------------------------------------------------
//Query created games by city name.
//Request:
message ListGameRequest {
    string city_name = 1;
}

//Answer
message ListGameAnswer {
    message Game{
        uint64 id = 1;
        string name = 2;
        uint32 longitude = 3;
        uint32 latitude = 4;
        uint32 nplayer = 5;
        uint32 max_nplayer = 6;
    }  
    repeated Game games = 1;
}
//----------------------------------------------------------------------------------------------------------------
//Join the game
//Request:
message JoinRequest{
    uint64 game_id = 1;
}
//Answer:
message JoinAnswer {
    enum JoinErrNo{
        OK = 0;
        ERR = 1;
    } 

    JoinErrNo errno = 1;
}
